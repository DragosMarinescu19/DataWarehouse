
--Inserting cleansed data into silver schema
insert into silver.crm_cust_info(cst_id,cast_key,cst_firstname,cst_lastname,cst_marital_status,cst_gndr,cst_create_date)
select cst_id,
cast_key,
TRIM(cst_firstname) as cst_firstname,
TRIM(cst_lastname) as cst_lastname,
	CASE WHEN UPPER(TRIM(cst_marital_status))='S' THEN 'Single' 
	     WHEN UPPER(TRIM(cst_marital_status))='M' THEN 'Married'
		 ELSE 'n/a'
	end as cst_marital_status,

	CASE WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male' 
	     WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
		 ELSE 'n/a'
	end as cst_gndr,
cst_create_date 
from(
select *,RANK() over(partition by cst_id order by cst_create_date desc)as flag_last from [bronze].[crm_cust_info] 
) as temp where flag_last =1 and cst_create_date is not null

------------------------------------------

insert into silver.crm_prd_info(prd_id,cat_id,prd_key,prd_nm,prd_cost,prd_line,prd_start_dt,prd_end_dt)
SELECT
	prd_id,
	REPLACE(SUBSTRING(prd_key,1,5),'-','_') as cat_id,
	SUBSTRING(prd_key,7,LEN(prd_key)) as prd_key,
	prd_nm,
	ISNULL(prd_cost,0) as prd_cost,

	CASE TRIM(UPPER(prd_line))
		 WHEN 'M' THEN 'Mountain'
		 WHEN 'R' THEN 'Road'
		 WHEN 'S' THEN 'Other Sales'
		 WHEN 'T' THEN 'Touring'
		 ELSE 'n/a'
	END as prd_line,
	CAST(prd_start_dt as DATE) as prd_start_dt,
	CAST(DATEADD(DAY,-1,LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt))as DATE) as prd_end_dt
FROM bronze.crm_prd_info 




--check for nulls or negative costs
select prd_id,count(*) from [silver].[crm_prd_info] group by prd_id having count(*) >1

--Check for unwanted spaces
select distinct(prd_line) from silver.[crm_prd_info]

--Check for invalid date orders
select * from silver.[crm_prd_info] where prd_end_dt<prd_start_dt

select * from silver.crm_prd_info

-------------------------------------------------------------------------


insert into silver.crm_sales_details(sls_ord_num,sls_prd_key,sls_cust_id,sls_order_dt,sls_ship_dt,sls_due_dt,sls_sales,sls_quantity,sls_price)
SELECT sls_ord_num
      ,sls_prd_key
      ,sls_cust_id,

	  CASE WHEN sls_order_dt<=0 or len(sls_order_dt)!=8 then NULL
		   ELSE CAST(CAST(sls_order_dt as VARCHAR) as DATE)
	  END as sls_order_dt,

	  CASE WHEN sls_ship_dt<=0 or len(sls_ship_dt)!=8 then NULL
		   ELSE CAST(CAST(sls_ship_dt as VARCHAR) as DATE)
	  END as sls_ship_dt,

	  CASE WHEN sls_due_dt<=0 or len(sls_due_dt)!=8 then NULL
		   ELSE CAST(CAST(sls_due_dt as VARCHAR) as DATE)
	  END as sls_due_dt,
	  
	  CASE WHEN sls_sales is null or sls_sales <=0 or sls_sales!=sls_quantity*ABS(sls_price)
		THEN sls_quantity*ABS(sls_price)
		ELSE sls_sales
	  END as sls_sales,

      [sls_quantity],

      CASE WHEN sls_price is null or sls_price=0 
	    THEN sls_sales/nullif(sls_quantity,0)
		ELSE ABS(sls_price)
	  END as sls_price
  FROM [bronze].[crm_sales_details]

  --Check for invalid dates
 SELECT nullif(sls_order_dt,0) from silver.[crm_sales_details] 
 where sls_order_dt<=0 or 
 len(sls_order_dt)!=8 or 
 sls_order_dt>20500101 or
 sls_order_dt<19000101

 --check for invalid ddate orders
 select * from silver.[crm_sales_details]  where sls_order_dt> sls_ship_dt or sls_order_dt> sls_due_dt

 --check for invalid sales , quantity or price

select distinct 
sls_sales,
sls_quantity,
sls_price
 FROM silver.[crm_sales_details]
 WHERE sls_sales!=sls_quantity*sls_price OR
 sls_sales is null or sls_price is null or sls_quantity is null OR
 sls_sales <=0 or sls_price <=0 or sls_quantity <=0
